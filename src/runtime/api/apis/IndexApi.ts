/* tslint:disable */
/* eslint-disable */
/**
 * mongocamp-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorDescription,
    ErrorDescriptionFromJSON,
    ErrorDescriptionToJSON,
    IndexCreateRequest,
    IndexCreateRequestFromJSON,
    IndexCreateRequestToJSON,
    IndexCreateResponse,
    IndexCreateResponseFromJSON,
    IndexCreateResponseToJSON,
    IndexDropResponse,
    IndexDropResponseFromJSON,
    IndexDropResponseToJSON,
    IndexOptionsRequest,
    IndexOptionsRequestFromJSON,
    IndexOptionsRequestToJSON,
    MongoIndex,
    MongoIndexFromJSON,
    MongoIndexToJSON,
} from '../models';

export interface CreateExpiringIndexRequest {
    collectionName: string;
    fieldName: string;
    duration: string;
    sortAscending?: boolean;
    name?: string;
}

export interface CreateIndexRequest {
    collectionName: string;
    indexCreateRequest: IndexCreateRequest;
}

export interface CreateIndexForFieldRequest {
    collectionName: string;
    fieldName: string;
    sortAscending?: boolean;
    indexOptionsRequest?: IndexOptionsRequest;
}

export interface CreateTextIndexRequest {
    collectionName: string;
    fieldName: string;
    indexOptionsRequest?: IndexOptionsRequest;
}

export interface CreateUniqueIndexRequest {
    collectionName: string;
    fieldName: string;
    sortAscending?: boolean;
    name?: string;
}

export interface DeleteIndexRequest {
    collectionName: string;
    indexName: string;
}

export interface IndexRequest {
    collectionName: string;
    indexName: string;
}

export interface ListIndicesRequest {
    collectionName: string;
}

/**
 * 
 */
export class IndexApi extends runtime.BaseAPI {

    /**
     * Create expiring Index by Field for given Collection
     * Create expiring Index by Field for Collection
     */
    async createExpiringIndexRaw(requestParameters: CreateExpiringIndexRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IndexCreateResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling createExpiringIndex.');
        }

        if (requestParameters.fieldName === null || requestParameters.fieldName === undefined) {
            throw new runtime.RequiredError('fieldName','Required parameter requestParameters.fieldName was null or undefined when calling createExpiringIndex.');
        }

        if (requestParameters.duration === null || requestParameters.duration === undefined) {
            throw new runtime.RequiredError('duration','Required parameter requestParameters.duration was null or undefined when calling createExpiringIndex.');
        }

        const queryParameters: any = {};

        if (requestParameters.sortAscending !== undefined) {
            queryParameters['sortAscending'] = requestParameters.sortAscending;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index/field/{fieldName}/{duration}/expiring`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"fieldName"}}`, encodeURIComponent(String(requestParameters.fieldName))).replace(`{${"duration"}}`, encodeURIComponent(String(requestParameters.duration))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create expiring Index by Field for given Collection
     * Create expiring Index by Field for Collection
     */
    async createExpiringIndex(requestParameters: CreateExpiringIndexRequest, initOverrides?: RequestInit): Promise<IndexCreateResponse> {
        const response = await this.createExpiringIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Index for given Collection
     * Create Index for Collection
     */
    async createIndexRaw(requestParameters: CreateIndexRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IndexCreateResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling createIndex.');
        }

        if (requestParameters.indexCreateRequest === null || requestParameters.indexCreateRequest === undefined) {
            throw new runtime.RequiredError('indexCreateRequest','Required parameter requestParameters.indexCreateRequest was null or undefined when calling createIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndexCreateRequestToJSON(requestParameters.indexCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Index for given Collection
     * Create Index for Collection
     */
    async createIndex(requestParameters: CreateIndexRequest, initOverrides?: RequestInit): Promise<IndexCreateResponse> {
        const response = await this.createIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Index by Field for given Collection
     * Create Index by Field for Collection
     */
    async createIndexForFieldRaw(requestParameters: CreateIndexForFieldRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IndexCreateResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling createIndexForField.');
        }

        if (requestParameters.fieldName === null || requestParameters.fieldName === undefined) {
            throw new runtime.RequiredError('fieldName','Required parameter requestParameters.fieldName was null or undefined when calling createIndexForField.');
        }

        const queryParameters: any = {};

        if (requestParameters.sortAscending !== undefined) {
            queryParameters['sortAscending'] = requestParameters.sortAscending;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index/field/{fieldName}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"fieldName"}}`, encodeURIComponent(String(requestParameters.fieldName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndexOptionsRequestToJSON(requestParameters.indexOptionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Index by Field for given Collection
     * Create Index by Field for Collection
     */
    async createIndexForField(requestParameters: CreateIndexForFieldRequest, initOverrides?: RequestInit): Promise<IndexCreateResponse> {
        const response = await this.createIndexForFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create text index by field for given collection
     * Create text index by field for collection
     */
    async createTextIndexRaw(requestParameters: CreateTextIndexRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IndexCreateResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling createTextIndex.');
        }

        if (requestParameters.fieldName === null || requestParameters.fieldName === undefined) {
            throw new runtime.RequiredError('fieldName','Required parameter requestParameters.fieldName was null or undefined when calling createTextIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index/field/{fieldName}/text`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"fieldName"}}`, encodeURIComponent(String(requestParameters.fieldName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndexOptionsRequestToJSON(requestParameters.indexOptionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create text index by field for given collection
     * Create text index by field for collection
     */
    async createTextIndex(requestParameters: CreateTextIndexRequest, initOverrides?: RequestInit): Promise<IndexCreateResponse> {
        const response = await this.createTextIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Unique Index by Field for given Collection
     * Create Unique Index
     */
    async createUniqueIndexRaw(requestParameters: CreateUniqueIndexRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IndexCreateResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling createUniqueIndex.');
        }

        if (requestParameters.fieldName === null || requestParameters.fieldName === undefined) {
            throw new runtime.RequiredError('fieldName','Required parameter requestParameters.fieldName was null or undefined when calling createUniqueIndex.');
        }

        const queryParameters: any = {};

        if (requestParameters.sortAscending !== undefined) {
            queryParameters['sortAscending'] = requestParameters.sortAscending;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index/field/{fieldName}/unique`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"fieldName"}}`, encodeURIComponent(String(requestParameters.fieldName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Unique Index by Field for given Collection
     * Create Unique Index
     */
    async createUniqueIndex(requestParameters: CreateUniqueIndexRequest, initOverrides?: RequestInit): Promise<IndexCreateResponse> {
        const response = await this.createUniqueIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Index by Name for given Collection
     * Delete Index
     */
    async deleteIndexRaw(requestParameters: DeleteIndexRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IndexDropResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling deleteIndex.');
        }

        if (requestParameters.indexName === null || requestParameters.indexName === undefined) {
            throw new runtime.RequiredError('indexName','Required parameter requestParameters.indexName was null or undefined when calling deleteIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index/{indexName}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"indexName"}}`, encodeURIComponent(String(requestParameters.indexName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexDropResponseFromJSON(jsonValue));
    }

    /**
     * Delete Index by Name for given Collection
     * Delete Index
     */
    async deleteIndex(requestParameters: DeleteIndexRequest, initOverrides?: RequestInit): Promise<IndexDropResponse> {
        const response = await this.deleteIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index by Name for given Collection
     * Index for Collection
     */
    async indexRaw(requestParameters: IndexRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MongoIndex>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling index.');
        }

        if (requestParameters.indexName === null || requestParameters.indexName === undefined) {
            throw new runtime.RequiredError('indexName','Required parameter requestParameters.indexName was null or undefined when calling index.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index/{indexName}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"indexName"}}`, encodeURIComponent(String(requestParameters.indexName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MongoIndexFromJSON(jsonValue));
    }

    /**
     * Index by Name for given Collection
     * Index for Collection
     */
    async index(requestParameters: IndexRequest, initOverrides?: RequestInit): Promise<MongoIndex> {
        const response = await this.indexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all Indices for given Collection
     * List Indices for Collection
     */
    async listIndicesRaw(requestParameters: ListIndicesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<MongoIndex>>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling listIndices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-AUTH-APIKEY"] = this.configuration.apiKey("X-AUTH-APIKEY"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("httpAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mongodb/collections/{collectionName}/index`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MongoIndexFromJSON));
    }

    /**
     * List all Indices for given Collection
     * List Indices for Collection
     */
    async listIndices(requestParameters: ListIndicesRequest, initOverrides?: RequestInit): Promise<Array<MongoIndex>> {
        const response = await this.listIndicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
