/* tslint:disable */
/* eslint-disable */
/**
 * mongocamp-library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface JsonSchemaDefinition
 */
export interface JsonSchemaDefinition {
    /**
     * 
     * @type {string}
     * @memberof JsonSchemaDefinition
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchemaDefinition
     */
    title: string;
    /**
     * 
     * @type {boolean}
     * @memberof JsonSchemaDefinition
     */
    additionalProperties: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof JsonSchemaDefinition
     */
    required?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof JsonSchemaDefinition
     */
    properties: { [key: string]: { [key: string]: string; }; };
}

/**
 * Check if a given object implements the JsonSchemaDefinition interface.
 */
export function instanceOfJsonSchemaDefinition(value: object): value is JsonSchemaDefinition {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('additionalProperties' in value) || value['additionalProperties'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    return true;
}

export function JsonSchemaDefinitionFromJSON(json: any): JsonSchemaDefinition {
    return JsonSchemaDefinitionFromJSONTyped(json, false);
}

export function JsonSchemaDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): JsonSchemaDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'additionalProperties': json['additionalProperties'],
        'required': json['required'] == null ? undefined : json['required'],
        'properties': json['properties'],
    };
}

  export function JsonSchemaDefinitionToJSON(json: any): JsonSchemaDefinition {
      return JsonSchemaDefinitionToJSONTyped(json, false);
  }

  export function JsonSchemaDefinitionToJSONTyped(value?: JsonSchemaDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'title': value['title'],
        'additionalProperties': value['additionalProperties'],
        'required': value['required'],
        'properties': value['properties'],
    };
}

