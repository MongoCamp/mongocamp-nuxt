/* tslint:disable */
/* eslint-disable */
/**
 * mongocamp-library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CollectionStatus
 */
export interface CollectionStatus {
    /**
     * 
     * @type {string}
     * @memberof CollectionStatus
     */
    ns: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionStatus
     */
    collectionType: string;
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    scaleFactor: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    count: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    storageSize: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    avgObjSize: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    nindexes: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof CollectionStatus
     */
    indexSizes: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    totalIndexSize: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionStatus
     */
    ok: number;
    /**
     * 
     * @type {Date}
     * @memberof CollectionStatus
     */
    fetched: Date;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CollectionStatus
     */
    map: { [key: string]: string; };
}

/**
 * Check if a given object implements the CollectionStatus interface.
 */
export function instanceOfCollectionStatus(value: object): value is CollectionStatus {
    if (!('ns' in value) || value['ns'] === undefined) return false;
    if (!('collectionType' in value) || value['collectionType'] === undefined) return false;
    if (!('scaleFactor' in value) || value['scaleFactor'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('count' in value) || value['count'] === undefined) return false;
    if (!('storageSize' in value) || value['storageSize'] === undefined) return false;
    if (!('avgObjSize' in value) || value['avgObjSize'] === undefined) return false;
    if (!('nindexes' in value) || value['nindexes'] === undefined) return false;
    if (!('indexSizes' in value) || value['indexSizes'] === undefined) return false;
    if (!('totalIndexSize' in value) || value['totalIndexSize'] === undefined) return false;
    if (!('ok' in value) || value['ok'] === undefined) return false;
    if (!('fetched' in value) || value['fetched'] === undefined) return false;
    if (!('map' in value) || value['map'] === undefined) return false;
    return true;
}

export function CollectionStatusFromJSON(json: any): CollectionStatus {
    return CollectionStatusFromJSONTyped(json, false);
}

export function CollectionStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): CollectionStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'ns': json['ns'],
        'collectionType': json['collectionType'],
        'scaleFactor': json['scaleFactor'],
        'size': json['size'],
        'count': json['count'],
        'storageSize': json['storageSize'],
        'avgObjSize': json['avgObjSize'],
        'nindexes': json['nindexes'],
        'indexSizes': json['indexSizes'],
        'totalIndexSize': json['totalIndexSize'],
        'ok': json['ok'],
        'fetched': (new Date(json['fetched'])),
        'map': json['map'],
    };
}

export function CollectionStatusToJSON(value?: CollectionStatus | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'ns': value['ns'],
        'collectionType': value['collectionType'],
        'scaleFactor': value['scaleFactor'],
        'size': value['size'],
        'count': value['count'],
        'storageSize': value['storageSize'],
        'avgObjSize': value['avgObjSize'],
        'nindexes': value['nindexes'],
        'indexSizes': value['indexSizes'],
        'totalIndexSize': value['totalIndexSize'],
        'ok': value['ok'],
        'fetched': ((value['fetched']).toISOString()),
        'map': value['map'],
    };
}

