/* tslint:disable */
/* eslint-disable */
/**
 * mongocamp-library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SettingsResponse
 */
export interface SettingsResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof SettingsResponse
     */
    routesPlugins?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SettingsResponse
     */
    filePlugins?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SettingsResponse
     */
    ignoredPlugins?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof SettingsResponse
     */
    configurations: { [key: string]: string; };
}

/**
 * Check if a given object implements the SettingsResponse interface.
 */
export function instanceOfSettingsResponse(value: object): value is SettingsResponse {
    if (!('configurations' in value) || value['configurations'] === undefined) return false;
    return true;
}

export function SettingsResponseFromJSON(json: any): SettingsResponse {
    return SettingsResponseFromJSONTyped(json, false);
}

export function SettingsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SettingsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'routesPlugins': json['routesPlugins'] == null ? undefined : json['routesPlugins'],
        'filePlugins': json['filePlugins'] == null ? undefined : json['filePlugins'],
        'ignoredPlugins': json['ignoredPlugins'] == null ? undefined : json['ignoredPlugins'],
        'configurations': json['configurations'],
    };
}

  export function SettingsResponseToJSON(json: any): SettingsResponse {
      return SettingsResponseToJSONTyped(json, false);
  }

  export function SettingsResponseToJSONTyped(value?: SettingsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'routesPlugins': value['routesPlugins'],
        'filePlugins': value['filePlugins'],
        'ignoredPlugins': value['ignoredPlugins'],
        'configurations': value['configurations'],
    };
}

